====================================================================
General Info
====================================================================
mvn exec:java or build-and-run.sh will compile and run the code

- Entrypoint is at Main.java; see other class files for detailed
definitions.

- See input/data.json for input

You can..
- add modify files as they please
- ask questions for clarifications


=======================
Data structure overview
=======================
EthernetPort
  String name
  List<Vlan> vlans
    int vlanId
    int customer



====================================================================
    Task 1
====================================================================
In Main.java we load some input data by deserializing input/data.json
into an EthernetPort[].

Generate and output a report for that input.

The report is separated into sections by customer. Each section
contains multiple rows, one each per combination of port / vlan ids
that customer was present at.

Report format:
=============
Customer <customer>
- <port-name> : <vlan-id>
- <port-name> : <vlan-id>
  ... (more port-name:vlanId entries)
... (more customer sections)


Sample input
=============
[ {
  name: ge-1/1/0
  vlans: [
    { vlanId: 10, customer 1 }
    { vlanId: 15, customer 2 }
    { vlanId: 103, customer 1 }
  name: xe-1/0/0
  vlans: [
    { vlanId: 25, customer 2 }
    { vlanId: 554, customer 1 }



Sample output
=============
Customer 1
-  ge-1/1/0 : 10
-  ge-1/1/0 : 103
-  xe-1/0/0 : 554

Customer 2
-  ge-1/1/0 : 15
-  xe-1/0/0 : 25



====================================================================
    Task 2
====================================================================

Modify the EthernetPort class so that:
  - An EthernetPort instance MUST NOT have more than 512 Vlan entries.
  - All Vlan instances belonging to it MUST have different vlanId fields
from each other.

Method signatures in EthernetPort should stay the same.


====================================================================
    Task 3
====================================================================
For an EthernetPort instance we define two sets of integers representing
vlan-ids as follows:

- "in-use" vlan-ids is the set of all Vlan.vlanIds that are found in
the EthernetPort's vlans list,
- "free" vlan-ids is the set of all Vlan.vlanIds in the [0, 4095] range
that are NOT in the "in-use" set

Generate these sets in EthernetPort.inUseVlanIds() and .freeVlanIds().

Example:
in-use set: { 10, 12, 13, 20, 4095 }
free set: { 0, 1, ..., 9, 11, 14, ...., 4094 }



====================================================================
    Task 4
====================================================================
We provide the IntRange class, which represents a continuous range
of integers defined by a floor and a ceiling. The floor and ceiling
values both do belong to the range.

A set of integers can be represented uniquely by a set of IntRanges, i.e:

input: { 1, 0, 2, 3, 4, 8, 10, 11, 12 }
output:
[
  { floor: 0, ceiling: 4 }
  { floor: 8, ceiling: 8 }
  { floor: 10, ceiling: 12 }
]

Implement this transformation in EthernetPort.freeVlanRanges()

For bonus points, tie everything together and use IntRange.humanReadable()
to print out the free vlan ranges per port for the data in input.json .





